// Generated by CoffeeScript 1.4.0
(function() {
  var TmpStorage, getSeconds, getTimestamp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  getTimestamp = function() {
    return Math.floor(0.001 * +(new Date));
  };

  getSeconds = function(timeStr) {
    var dict, time, unit, _, _ref;
    if (timeStr == null) {
      return 0;
    }
    dict = {
      secs: 1,
      sec: 1,
      mins: 60,
      min: 60,
      hours: 3600,
      hour: 3600,
      days: 86400,
      day: 86400
    };
    _ref = timeStr.match(/([0-9.]+)([a-z]+)/i), _ = _ref[0], time = _ref[1], unit = _ref[2];
    if (unit in dict) {
      return dict[unit] * parseFloat(time);
    } else {
      return 0;
    }
  };

  TmpStorage = (function() {

    function TmpStorage(prefix) {
      this.prefix = prefix;
      this.getExpiration = __bind(this.getExpiration, this);

      this.getItem = __bind(this.getItem, this);

      this.setItem = __bind(this.setItem, this);

      this.clearExpiredValues = __bind(this.clearExpiredValues, this);

      this.load();
    }

    TmpStorage.prototype.load = function() {
      var _ref;
      try {
        this.data = JSON.parse(localStorage.getItem(this.prefix));
      } catch (_error) {}
      if (!(typeof this.data === 'object' && (this.data != null))) {
        this.data = {};
      }
      return this.expires = (_ref = this.data.__expires) != null ? _ref : {};
    };

    TmpStorage.prototype.flush = function() {
      return localStorage.setItem(this.prefix, JSON.stringify(this.data));
    };

    TmpStorage.prototype.clearExpiredValues = function() {
      var dirty, key, now, time, _ref;
      now = getTimestamp();
      dirty = false;
      _ref = this.expires;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        time = _ref[key];
        if (time <= now) {
          console.log(time, now, now - time);
          dirty = true;
          delete this.expires[key];
          delete this.data[key];
        }
      }
      if (dirty) {
        return this.flush();
      }
    };

    TmpStorage.prototype.setItem = function(key, value, expire) {
      this.data[key] = value;
      if (expire != null) {
        this.expires[key] = getTimestamp() + getSeconds(expire);
      }
      return this.flush();
    };

    TmpStorage.prototype.getItem = function(key) {
      this.clearExpiredValues();
      return this.data[key];
    };

    TmpStorage.prototype.getExpiration = function(key) {
      return this.expires[key];
    };

    TmpStorage.prototype.dispose = function() {};

    return TmpStorage;

  })();

  this.TmpStorage = TmpStorage;

}).call(this);
